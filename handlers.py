from telegram import Update
from telegram.ext import ContextTypes
from downloader import download_media
from telegram.constants import ParseMode
import mimetypes
import os
import time
from loguru import logger
import yt_dlp
from utils import is_supported_url

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ClipsyLoader</b> | powered by <a href="https://t.me/oksyol">oksyoldev</a>

<b> –ß—Ç–æ —è —É–º–µ—é: </b>
‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å TikTok
‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ —Å Instagram
‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å YouTube Shorts
‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ VK
‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ TikTok –∫–∞—Ä—É—Å–µ–ª–µ–π

‚ùì <u>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</u>
<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ—Å—Ç —Å –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, –∏ —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å!</i>

‚ö° –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ
üì¶ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: 50MB
üì∑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: 20MB
    """
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    
    if not is_supported_url(url):
        await update.message.reply_text("*–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞*", parse_mode='Markdown')
        return

    if 'instagram.com' in url.lower():
        msg_text = "‚è≥ *–°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å Instagram...*"
    elif 'tiktok.com' in url.lower():
        msg_text = "‚è≥ *–°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å TikTok...*"
    else:
        msg_text = "‚è≥ *–°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...*"
    
    msg = await update.message.reply_text(msg_text, parse_mode='Markdown')

    file_path = None
    try:
        file_path, description, is_video = download_media(url)
        
        await msg.edit_text("‚úÖ *–ö–æ–Ω—Ç–µ–Ω—Ç —Å–∫–∞—á–∞–Ω! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...*", parse_mode='Markdown')

        mime_type, _ = mimetypes.guess_type(file_path)
        is_video = mime_type and mime_type.startswith('video')
        is_photo = mime_type and mime_type.startswith('image')

        time.sleep(1)
        
        try:
            if is_video:
                await context.bot.send_video(
                    chat_id=update.effective_chat.id,
                    video=open(file_path, "rb"),
                    caption=f"üé¨ *–°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @fastlinksaver_bot*",
                    parse_mode='Markdown',
                    read_timeout=120,
                    write_timeout=120,
                    connect_timeout=120
                )
            elif is_photo:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=open(file_path, "rb"),
                    caption=f"üì∑ *–°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @fastlinksaver_bot*",
                    parse_mode='Markdown',
                    read_timeout=60,
                    write_timeout=60,
                    connect_timeout=60
                )
            else:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id, 
                    document=open(file_path, "rb"),
                    caption=f"üìÑ *–°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @fastlinksaver_bot*",
                    parse_mode='Markdown',
                    read_timeout=60,
                    write_timeout=60,
                    connect_timeout=60
                )
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}")
            time.sleep(2)
            await context.bot.send_document(
                chat_id=update.effective_chat.id, 
                document=open(file_path, "rb"),
                caption=f"üìÑ *–°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @fastlinksaver_bot*",
                parse_mode='Markdown',
                read_timeout=120,
                write_timeout=120,
                connect_timeout=120
            )

        if description and description != "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" and description.strip():
            if len(description) > 1000:
                description = description[:1000] + "..."
            
            content_type = "–≤–∏–¥–µ–æ" if is_video else "—Ñ–æ—Ç–æ"
            description_text = f"""
üìù –û–ø–∏—Å–∞–Ω–∏–µ {content_type}:

{description}

{'üé¨' if is_video else 'üì∑'} –°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @fastlinksaver_bot
            """
            await update.message.reply_text(description_text)
            
    except ValueError as ve:
        await msg.edit_text(f"*–û—à–∏–±–∫–∞:* {str(ve)}", parse_mode='Markdown')
    except yt_dlp.utils.DownloadError as de:
        if "blocked" in str(de).lower() or "ip address" in str(de).lower():
            await msg.edit_text("*–û—à–∏–±–∫–∞: –í–∞—à IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω* üò¢\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN", parse_mode='Markdown')
        elif "Unsupported URL" in str(de):
            await msg.edit_text("*–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É", parse_mode='Markdown')
        else:
            await msg.edit_text("*–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.*\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –°–µ—Ä–≤–∏—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", parse_mode='Markdown')
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {de}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        try:
            await msg.edit_text("*–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.*\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –°–µ—Ä–≤–∏—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞", parse_mode='Markdown')
        except:
            await update.message.reply_text("*–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.*\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –°–µ—Ä–≤–∏—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞", parse_mode='Markdown')
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        if file_path and os.path.exists(file_path):
            try:
                time.sleep(1)
                os.remove(file_path)
                base_name = os.path.splitext(file_path)[0]
                for ext in ['.info.json', '.description']:
                    meta_path = base_name + ext
                    if os.path.exists(meta_path):
                        os.remove(meta_path)
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {delete_error}")